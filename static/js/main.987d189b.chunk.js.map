{"version":3,"sources":["Currencies.js","actions/index.js","Currencycard.js","Resultcard.js","App.js","serviceWorker.js","reducers/index.js","reducers/currency.js","index.js"],"names":["Currencies","props","dispatch","useDispatch","useState","search","setSearch","target","setTarget","fromCurrency","useSelector","state","currencyFrom","toCurrency","currencyTo","CheckSelected","currency","id","className","placeholder","type","onChange","e","value","onClick","currencies","filter","toLowerCase","includes","name","map","key","curr","changeTo","updateRate","currencyTapped","src","alt","Currencycard","amount","Resultcard","result","toFixed","App","setCurrencies","setAmount","rates","setRates","rate","setRate","useEffect","fetch","then","responce","console","log","json","setupCurrencies","Object","keys","n1","n2","currKeys","currInfo","results","currObjectArray","currObjct","currencyName","push","Boolean","window","location","hostname","match","allReducers","combineReducers","action","mystore","createStore","ReactDOM","render","store","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.987d189b.chunk.js","sourcesContent":["import React,{ useState } from 'react';\nimport './App.css';\nimport {changeTo} from './actions';\nimport {changeFrom} from './actions';\nimport {useDispatch, useSelector} from 'react-redux';\n\nconst Currencies = props => {\n\n\tconst dispatch = useDispatch();\n\tconst [search,setSearch] = useState(\"\");\n\tconst [target,setTarget] = useState(\"from\");\n\n\tconst fromCurrency = useSelector(state => state.currencyFrom);\n\tconst toCurrency = useSelector(state => state.currencyTo);\n\n\tconst checkTarget = (val) => {\n\t\treturn val==target ? val+\" active\" : val\n\t}\n\n\tconst filterSearch = (e) => {\n\t\tsetSearch(e.target.value)\n\t}\n\n\tconst onTargetChanged = (newTarget) => {\n\t\tthis.setState({target: newTarget});\n\t\tprops.onTargetChanged(newTarget);\n\t}\n\n\tconst currencyTapped = currency => {\n\t\tif (target == \"from\") {\n\t\t\tdispatch(changeFrom(currency))\n\t\t}\n\t\telse {\n\t\t\tdispatch(changeTo(currency))\n\t\t}\n\t\tprops.updateRate()\n\t}\n\n\tconst CheckSelected = currency => {\n\t\tif ((target==\"from\" && fromCurrency.id==currency) || (target==\"to\" && toCurrency.id==currency))\n\t\t{\n\t\t\treturn \"currency active\"\n\t\t}\n\t\telse \n\t\t{\n\t\t\treturn \"currency\"\n\t\t}\n\t}\n\n\treturn (\n\t\t\t<div className=\"currencies\">\n\t\t\t<input className=\"searchbar\" placeholder=\"Search...\" type=\"text\" onChange={filterSearch} />\n\t\t\t\t<div className=\"controls\">\n\t\t\t\t\t\t<a className={\"from\"+(target==\"from\"?\" active\":\"\")} onClick={() => {setTarget(\"from\")}} >From</a>\n\t\t\t\t\t\t<a className={\"to\"+(target==\"to\"?\" active\":\"\")} onClick={() => {setTarget(\"to\")}} >To</a>\n\t\t\t\t</div>\n\t\t\t\t{props.currencies.filter((currency)=>{ return currency.id.toLowerCase().includes(search.toLowerCase()) || currency.name.toLowerCase().includes(search.toLowerCase())})\n\t\t\t\t\t.map((currency) => {\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t<div key={currency.id} className={CheckSelected(currency.id)} onClick={() => {currencyTapped(currency)}} >\n\t\t\t\t\t          <img className=\"currency-icon\" src={\"/Flags/\"+currency.id.toLowerCase()+\".svg\"} alt=\"currency converted\"/>\n\t\t\t\t\t          <div className=\"currency-info\">\n\t\t\t\t\t            <p className=\"symbol\">{currency.id}</p>\n\t\t\t\t\t            <p className=\"currency-description\">{currency.name}</p>\n\t\t\t\t\t          </div>\n\t\t\t\t\t        </div>\n\t\t\t\t\t\t);\n\t\t\t\t})}\n\t\t\t</div>\n\t\t);\n\n}\n\nexport default Currencies;","export const changeFrom = curr => {\n\treturn {\n\t\ttype: \"CHANGE_FROM\",\n\t\tcurrency: curr\n\t}\n}\n\nexport const changeTo = curr => {\n\treturn {\n\t\ttype: \"CHANGE_TO\",\n\t\tcurrency: curr\n\t}\n}","import React, {useState} from 'react';\nimport {useSelector} from 'react-redux';\nimport './App.css';\n\n\nconst Currencycard = props => {\n  \n  const [value,setValue] = useState(1);\n  const fromCurrency = useSelector(state => state.currencyFrom);\n  \n  return (\n        <div className=\"inner-container card-from\" >\n              <div className=\"selected-currency\">\n                <img src={\"/Flags/\"+fromCurrency.id.toLowerCase()+\".svg\"} className=\"currency-icon\" alt=\"currency converted\"/>\n                <div className=\"currency-info\">\n                  <p className=\"symbol\">{fromCurrency.id}</p>\n                  <p className=\"currency-description\">{fromCurrency.name}</p>\n                </div>\n              </div>\n              <input placeholder=\"Enter the amount here\" className=\"amount-label\" type=\"text\" name=\"from\" onChange={(e) => props.amount(e.target.value)}/>\n          </div>\n  );\n\n}\n\n\nexport default Currencycard;","import React from 'react';\nimport {useSelector} from 'react-redux';\n\nconst Resultcard = props => {\n\n \tconst toCurrency = useSelector(state => state.currencyTo);\n\n\treturn (\n\t\t<div className=\"inner-container card-to\" >\n\t\t\t<div className=\"selected-currency\">\n\t\t\t\t<img src={\"/Flags/\"+toCurrency.id.toLowerCase()+\".svg\"} className=\"currency-icon\" alt=\"currency converted\"/>\n\t\t\t\t<div className=\"currency-info\">\n\t\t\t\t\t<p className=\"symbol\">{toCurrency.id}</p>\n\t\t\t\t\t<p className=\"currency-description\">{toCurrency.name}</p>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<p className=\"amount-label\">{props.result.toFixed(2)+\" \"+toCurrency.id}</p>\n\t\t</div>\n\t);\n}\n\n\nexport default Resultcard;","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport Currencies from './Currencies';\nimport Currencycard from './Currencycard';\nimport Resultcard from './Resultcard';\nimport {useSelector} from 'react-redux';\n\n\nconst App = () => {\n\n\tconst fromCurrency = useSelector(state => state.currencyFrom);\n\tconst toCurrency = useSelector(state => state.currencyTo);\n\n\tconst [currencies,setCurrencies] = useState([]);\n\tconst [amount,setAmount] = useState(0);\n\tconst [rates,setRates] = useState({});\n\tconst [rate,setRate] = useState(0);\n\n\tuseEffect(() => {\n\t\tfetch(\"https://api.exchangeratesapi.io/latest\")\n\t\t.then( (responce) => {\n\t\t\t\tconsole.log(\"FETCHING....\")\n\t\t\t\tresponce.json()\n\t\t\t\t.then((json) => {\n\t\t\t\t\tsetupCurrencies(Object.keys(json.rates));\n\t\t\t\t\tsetRates(json.rates);\n\t\t\t\t\tconsole.log(\"RATES> \"+rates);\n\n\t\t\t\t\tvar n1 = json.rates[fromCurrency.id];\n\t\t\t\t\tvar n2 = json.rates[toCurrency.id];\n\t\t\t\t\tvar newRate = 1/(n1/n2);\n\t\t\t\t\tsetRate(newRate);\n\t\t\t\t})\n\t\t\t}\n\t\t)\n\t},[fromCurrency,toCurrency]);\n\n\n\tconst setupCurrencies = (currKeys) => {\n\t\tfetch(\"currencies.json\")\n\t\t.then( (responce) => {\n\t\t\t\tresponce.json()\n\t\t\t\t.then((json) => {\n\t\t\t\t\tvar currInfo = json.results;\n\t\t\t\t\tvar currObjectArray = [];\n\n\t\t\t\t\tcurrKeys.map(key => {\n\t\t\t\t\t\tlet currObjct = {\n\t\t\t\t\t\t\tid: key,\n\t\t\t\t\t\t\tname: currInfo[key].currencyName\n\t\t\t\t\t\t};\n\t\t\t\t\t\tcurrObjectArray.push(currObjct);\n\t\t\t\t\t});\t\n\n\t\t\t\t\tsetCurrencies(currObjectArray);\n\t\t\t\t});\n\t\t\t}\n\t\t)\n\t}\n\n\tconst updateAmount = value => {\n\t\tsetAmount(value);\n\t}\n\n\tconst updateRate = () => {\n\t\tvar n1 = rates[fromCurrency.id];\n\t\tvar n2 = rates[toCurrency.id];\n\t\tvar newRate = 1/(n1/n2);\n\t\tsetRate(newRate);\n\t}\n\n\treturn (\n\t\t\t<div className=\"App\">\n\t\t\t\t<div className=\"container\">\n\t\t\t\t\t<Currencycard amount={updateAmount} />\n\t\t\t\t\t<Resultcard result={amount*rate}/>\n\t\t\t\t\t<Currencies currencies={currencies} updateRate={updateRate} />\n\t\t\t\t</div>\n\t\t\t</div>\n\t);\n}\n\n\nexport default App;\n\n\n\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {currencyFrom, currencyTo} from './currency';\nimport {combineReducers} from 'redux';\n\n\nconst allReducers = combineReducers({\n\tcurrencyFrom : currencyFrom,\n\tcurrencyTo : currencyTo\n});\n\n\nexport default allReducers;","export const currencyFrom = (state = {id: \"USD\",name: \"United State Dollar\"},action) => {\n\tswitch(action.type) {\n\t\tcase 'CHANGE_FROM':\n\t\t\treturn action.currency\n\t\tdefault: return state;\n\t}\n}\n\nexport const currencyTo = (state = {id: \"CAD\",name: \"Canadian Dollar\"},action) => {\n\tswitch(action.type) {\n\t\tcase 'CHANGE_TO':\n\t\t\treturn action.currency\n\t\tdefault: return state;\n\t}\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { createStore } from 'redux';\nimport allReducers from './reducers';\nimport { Provider } from 'react-redux';\n\nvar mystore = createStore(allReducers);\n\nReactDOM.render(\n\t<Provider store={mystore}>\n\t<App />\n\t</Provider>\n\t, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}